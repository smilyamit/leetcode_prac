1)Given an array of integers, return indices of the two numbers such that they add up to a specific target.
 You may assume that each input would have exactly one solution, and you may not use the same element twice
 Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1]

my brute force soln:
class Solution:
    def twoSum(self, nums, target):
        for i in range(len(nums):
            for j in range(i+1, len(nums)):
                if nums[i] + nums[j] = target:
                    return [i,j]                 # note they are asking for indexes of that nos which sum upto target
         return[]

my dictionary method (hash map)
class Solution:
    def twoSum(self, nums, target):
        lib = {}
        for i,n in enumerate(nums):
            if n in lib:
                return [lib[n], i]
            lib[target-n] = i
        return []
        
here ugly truth is indexs is used as values for keys
nums = [2, 7, 11, 15]
for i,n in enumerate(nums):
  print(i, n)
0 2
1 7
2 11
3 15

here nums is list only but it is used as dictionary the moment when u say if n in lib where lib = {}
now it will be like lib = {2:0, 7:1, 11:2, 15:3}
here 2,7,11,15 are keys and 0,1,2,3 are values (which is used to be indexs)
always note:
for i, key in enumerate(lib):
    print(i, key)

0 2
1 7
2 11
3 15

but
for i, key in enumerate(lib):
    print(key)

2
7
11
15

for i, key in enumerate(lib):
    print(lib[key])     # lib[key] will give value
0
1
2
3
https://www.youtube.com/watch?v=UPsc_HbeSiE
https://www.youtube.com/watch?v=V1Yqw_ge1IM
#############################################################
#################################################################

2 You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and
each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself
Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807

class Solution:
    def addTwoNumbers(self, l1, l2, c=0):
        val = l1.val + l2.val + c
        c = val // 10
        current = ListNode(val % 10 ) 
        
        if (l1.next != None or l2.next != None or c != 0):
            if l1.next == None:
                l1.next = ListNode(0)
            if l2.next == None:
                l2.next = ListNode(0)
            current.next = self.addTwoNumbers(l1.next,l2.next,c)
        return current     

###########################################################################
###########################################################################

3. Longest Substring Without Repeating Characters
Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             

In normal testing outside leetcode eg (vscode, repl.it online editor)
# l=left, r= right (here it work like index), 
class Solution:
  def longestSubString(self, s):

     l= 0
     longest = 0
     dicts = {}
     for r, char in enumerate(s):
       if char in dicts:
         l = max(l, dicts[char]+1)
       dicts[char] = r
       longest = max(r-l+1, longest)
     return longest


a = Solution()
print(a.longestSubString('abcaa'))


In leetcode
class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
       
        '''
        c a b c a b c b b
        l 0 0 0 1
        r 0 1 2 3 4 5 6 7
          1 2 3 3
        
        abcba
        
        calculate the length of substring ending at each index
        find the global maximum
        
        l =
        l of the previous substring OR
        1 + the index, the current character has last appeared
        
        Time O(n)
        Space O(k)
        n is the number of characters in the input string
        k is the number of unique possible characters (i.e. 26 is all lower case letters)
        '''
        longest = 0
        l = 0
        lib = {}
        
        for r,c in enumerate(s):
            if c in lib:
                l = max(l, lib[c] + 1)
            lib[c] = r
            longest = max(r - l + 1, longest)
        return longest

########################################################################################
#########################################################################################

4. Median of Two Sorted Arrays
There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n))

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums1.extend(nums2)
        nums1.sort()
        length = len(nums1)
        if length == 1:
            return float(nums1[0])
        elif length % 2 != 0:
            return(float(nums1[int((length + 1) / 2) - 1]))
        else:
            div1 = nums1[int((length / 2) - 1)]
            div2 = nums1[int(((length + 2) / 2) - 1)]
            return (div1 + div2) / 2

##################################################################################
#################################################################################

5. reverse positive or negative intezer
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321

Method-1
class Solution:
    def reverse(self, x: int) -> int:
        flag = 1
        if x<0:
            flag = -1
            
        x = flag*x
        res = [int(x) for x in str(x)]
        
        res.reverse()
        ans = 0
        for i in res:
            ans = ans*10 + i
        return ans*flag if -(2**31)-1< ans*flag< 2**31 else 0

Method-2

class Solution:
    def reverse(self, x: int) -> int:
        flag = 1
        if x<0:
            flag = -1
        r = int(str(abs(x))[::-1])
        return r*flag if -(2**31)-1 < r < 2**31 else 0

##########################################################
##############################################################
#Palindrome Number
Determine whether an integer is a palindrome. 
An integer is a palindrome when it reads the same backward as forward
In editor
def isPalindrome(n):
    temp = n
    rev =0
    rem =0
    while (n>0):
        rem = n%10
        n = n//10
        rev = rev*10 + rem
    if rev == temp:
      return True
    else:
      return False
    


print(isPalindrome(120))

In leetcode
class Solution:
    def isPalindrome(self, n: int) -> bool:
        temp = n
        rev =0
        rem =0
        while n>0:
            rem = n%10
            n = n//10
            rev = rev*10 + rem
        if rev == temp:
            return True
        else:
            return False

########################################################################
##########################################################################
Intezer to Roman
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Method-1 (in editor)
class Solution:
    def intToRoman(self, num: int) -> str:
        symbools = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]
        ans = ''
        for val, sym in symbools:
            if num/val:
                ans += sym* (num//val)
                num = num%val
                continue
        return ans


Method-2 (in leetcode)
class Solution:
  def intToRoman(self, num: int) -> str:
      symbools = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]
      ans = ''
      for val, sym in symbools:
          if num/val:
              ans += sym* (num//val)
              num = num%val
              continue
      return ans
 
 object1 = Solution()
 output = object1.intToRoman(17)
 print(output)
 
 #################################################
 Roamn to intezer
 in leetcode:
 class Solution:
    def romanToInt(self, s):
        R = ['CM', 'CD', 'XC', 'XL', 'IX', 'IV','M', 'D', 'C', 'L','X','V', 'I']
        I = [900, 400, 90,40, 9, 4, 1000, 500, 100, 50, 10, 5, 1]
        
        n = 0
        for (r,i) in zip(R,I):
            n += i * s.count(r)      
            s = s.replace(r, '')
        return n

In my editor
def romanToInt(s):
      R = ['CM', 'CD', 'XC', 'XL', 'IX', 'IV', 'M', 'D', 'C', 'L', 'X', 'V', 'I']
      I = [900, 400, 90, 40, 9, 4, 1000, 500, 100, 50, 10, 5, 1]
      n = 0
      for (r, i) in zip(R, I):
          n += i * s.count(r)
          s = s.replace(r, '')
      return n

print(romanToInt('XIV'))

#########################################################################################################
########################################################################################################

Longest Common Prefix
Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string

class Solution:
  def longestCommonPrefix(self, strs):
      res = ''
      for s in zip(*strs):
          if len(set(s)) == 1:
              res += s[0]
          else:
              return res
      return res

In online editor

strs = ["aca","cba"]
def strin(strs):
  res = ''
  for s in zip(*strs):
      print(s)

      if len(set(s)) == 1:
          res += s[0]
      else:
        return res
  return res

print(strin(strs))

####################################################################
#####################################################################

Valid parentheses (braces)

leetcode
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        h_map = {
        "{": "}",
        "(":")",
        "[":"]"
        }

        for braces in s:
            if braces in h_map:
              stack.append(h_map[braces])
            elif len(stack)==0 or stack.pop() != braces:
              return False
        return len(stack)==0
        
 in online editor (repl.it)
 
def paren(s):
  stack = []
  h_map = {
  "{": "}",
  "(":")",
  "[":"]"
}

  for braces in s:
    if braces in h_map:
      stack.append(h_map[braces])
    elif len(stack)==0 or stack.pop() != braces:
      return False
  return len(stack)==0

print(paren("(}"))

#################################################################################
################################################################################

Sorting without using sort method
a = [2,3,1,5,8,10,-3]
def sorte(a):
  for i in range(0, len(a)-1):
    for j in range(0, len(a)-i-1):
      if a[j] >= a[j+1]:
        a[j], a[j+1] = a[j+1], a[j]
  return a
      
print(sorte(a))

####################
Linked list simple eg (by sirg.com)
#Remember in linkedlist we can either delete/insert an item from start or last or anywhere in middle
class Node:
  def __init__(self,data):
    self.data = data
    self.next = None

class LinkedList:
  def __init__(self):
    self.start = None # var start is created as head
  
  def insertLast(self, value):
    newNode = Node(value)
    if self.start == None:
      self.start = newNode
    else:
      temp = self.start
      while temp.next != None:
        temp = temp.next
      temp.next = newNode
  
  def deleteFirst(self):
    if self.start == None:
      print('linked list is empty')
    
    else:
      self.start = self.start.next

  def viewList(self):
    if self.start == None:
      print("list is empty")
    else:
      temp =self.start
      while temp != None:
        print(temp.data, end = '-->')
        temp = temp.next


if __name__ == '__main__':
  myList = LinkedList()

  myList.insertLast(5)
  myList.insertLast(10)
  myList.insertLast(15)
  myList.insertLast(20)
  myList.viewList()

  print()
  myList.deleteFirst()
  myList.deleteFirst()
  myList.insertLast(30)
  myList.viewList()
  
#####################################################################
#####################################################################
Merge two sorted list
Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes
of the first two lists.

class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy = ListNode(-1)
        prev = dummy
        while l1 and l2:
            if l1.val <= l2.val:
                prev.next = l1
                l1 = l1.next
            else:
                prev.next = l2
                l2 = l2.next            
            prev = prev.next
        prev.next = l1 or l2    # one of l1 and l2 can be non-null at this point
        return dummy.next









