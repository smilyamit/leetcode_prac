1)Given an array of integers, return indices of the two numbers such that they add up to a specific target.
 You may assume that each input would have exactly one solution, and you may not use the same element twice.
 Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1]

my brute force soln:
class Solution:
    def twoSum(self, nums, target):
        for i in range(len(nums):
            for j in range(i+1, len(nums)):
                if nums[i] + nums[j] = target:
                    return [i,j]                 # note they are asking for indexes of that nos which sum upto target
         return[]

my dictionary method (hash map)
class Solution:
    def twoSum(self, nums, target):
        lib = {}
        for i,n in enumerate(nums):
            if n in lib:
                return [lib[n], i]
            lib[target-n] = i
        return []
        
here ugly truth is indexs is used as values for keys
nums = [2, 7, 11, 15]
for i,n in enumerate(nums):
  print(i, n)
0 2
1 7
2 11
3 15

here nums is list only but it is used as dictionary the moment when u say if n in lib where lib = {}
now it will be like lib = {2:0, 7:1, 11:2, 15:3}
here 2,7,11,15 are keys and 0,1,2,3 are values (which is used to be indexs)
always note:
for i, key in enumerate(lib):
    print(i, key)

0 2
1 7
2 11
3 15

but
for i, key in enumerate(lib):
    print(key)

2
7
11
15

for i, key in enumerate(lib):
    print(lib[key])     # lib[key] will give value
0
1
2
3
https://www.youtube.com/watch?v=UPsc_HbeSiE
https://www.youtube.com/watch?v=V1Yqw_ge1IM
#############################################################
###############################################################

2 You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and
each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself
Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807






















